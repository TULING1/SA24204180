library(Rcpp)
library(SA24204180)
devtools::document()
devtools::check()
library(Rcpp)
library(SA24204180)
set.seed(111)
x=runif(100,0,10)
z=rnorm(100,0,1)
y=2*x+1+z
result=lrC(x,y)
View(result)
library(Rcpp)
library(microbenchmark)
library(SA24204180)
set.seed(111)
x=runif(100,0,10)
z=rnorm(100,0,1)
y=2*x+1+z
results <- microbenchmark(
Rcpp = lrC(x, y),
Base = lm(y ~ x),
times = 100 # 可以根据需要调整重复次数
)
View(results)
library(Rcpp)
library(microbenchmark)
library(SA24204180)
set.seed(111)
x=runif(100,0,10)
z=rnorm(100,0,1)
y=2*x+1+z
results <- microbenchmark(
Rcpp = lrC(x, y),
Base = lm(y ~ x),
times = 10
)
print(results)
library(Rcpp)
library(microbenchmark)
library(SA24204180)
set.seed(111)
x=runif(100,0,10)
z=rnorm(100,0,1)
y=2*x+1+z
results <- microbenchmark(
rcpp_versiom = lrC(x, y),
r_version = lm(y ~ x),
times = 10
)
print(results)
# 定义一个函数来进行PCA分析
perform_pca <- function(data) {
# 计算数据的均值并中心化
centered_data <- scale(data, center = TRUE, scale = FALSE)
# 计算协方差矩阵
cov_matrix <- cov(centered_data)
# 计算特征值和特征向量
eigen_values <- eigen(cov_matrix)$values
eigen_vectors <- eigen(cov_matrix)$vectors
# 将特征值和特征向量组合成一个数据框
pca_results <- data.frame(eigen_values, eigen_vectors)
# 返回PCA结果
return(pca_results)
}
# 示例数据
set.seed(123)
data_matrix <- matrix(rnorm(100), nrow = 10, ncol = 5)
# 调用PCA函数
pca_results <- perform_pca(data_matrix)
# 打印PCA结果
print(pca_results)
# 使用prcomp函数进行PCA
pca_prcomp <- prcomp(data_matrix, center = TRUE, scale. = FALSE)
# 打印PCA结果
print(summary(pca_prcomp))
# 生成一些示例数据
set.seed(123)
data <- rnorm(1000)  # 生成1000个正态分布的随机数
# 定义高斯核函数
gaussian_kernel <- function(u) {
return(exp(-0.5 * u^2) / sqrt(2 * pi))
}
# 执行核密度估计
kernel_density_estimation <- function(data, x, h) {
n <- length(data)
k <- rep(0, length(x))
for (i in 1:n) {
k <- k + gaussian_kernel((x - data[i]) / h)
}
k <- k / (n * h)
return(k)
}
# 设置带宽（需要根据数据和需求进行调整）
h <- 0.5
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, x_grid, h)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}# 生成1000个正态分布的随机数
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}# 生成1000个正态分布的随机数
# 定义高斯核函数
gaussian_kernel <- function(u) {
return(exp(-0.5 * u^2) / sqrt(2 * pi))
}
# 执行核密度估计
kernel_density_estimation <- function(data, x, h) {
n <- length(data)
k <- rep(0, length(x))
for (i in 1:n) {
k <- k + gaussian_kernel((x - data[i]) / h)
}
k <- k / (n * h)
return(k)
}
# 设置带宽（需要根据数据和需求进行调整）
h <- 0.5
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, x_grid, h)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}# 生成1000个正态分布的随机数
# 定义高斯核函数
gaussian_kernel <- function(u) {
return(exp(-0.5 * u^2) / sqrt(2 * pi))
}
# 执行核密度估计
kernel_density_estimation <- function(data, x, h) {
n <- length(data)
k <- rep(0, length(x))
for (i in 1:n) {
k <- k + gaussian_kernel((x - data[i]) / h)
}
k <- k / (n * h)
return(k)
}
# 设置带宽（需要根据数据和需求进行调整）
h <- 0.1
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, x_grid, h)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}# 生成1000个正态分布的随机数
# 定义高斯核函数
gaussian_kernel <- function(u) {
return(exp(-0.5 * u^2) / sqrt(2 * pi))
}
# 执行核密度估计
kernel_density_estimation <- function(data, x, h) {
n <- length(data)
k <- rep(0, length(x))
for (i in 1:n) {
k <- k + gaussian_kernel((x - data[i]) / h)
}
k <- k / (n * h)
return(k)
}
# 设置带宽（需要根据数据和需求进行调整）
h <- 0.001
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, x_grid, h)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}# 生成1000个正态分布的随机数
# 定义高斯核函数
gaussian_kernel <- function(u) {
return(exp(-0.5 * u^2) / sqrt(2 * pi))
}
# 执行核密度估计
kernel_density_estimation <- function(data, x, h) {
n <- length(data)
k <- rep(0, length(x))
for (i in 1:n) {
k <- k + gaussian_kernel((x - data[i]) / h)
}
k <- k / (n * h)
return(k)
}
# 设置带宽（需要根据数据和需求进行调整）
h <- 0.05
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, x_grid, h)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
devtools::document()
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.05
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, h, x_grid)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.05
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, h, x_grid)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.1
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kernel_density_estimation(data, h, x_grid)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
devtools::document()
devtools::check()
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.1
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kde(data, h, x_grid)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.1
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kde(data, h, x_grid)
# 绘制核密度估计的结果
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
lines(x_grid,data,col = "red")
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.1
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kde(data, h, x_grid)
# 绘制核密度估计的结果
hist(data, breaks = 50)
# 生成一些示例数据
set.seed(123)
data <- numeric(1000)
weights <- c(0.3, 0.7)
means <- c(0, 1)
sigma <- c(1, 2)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.1
# 创建一个密集的x值网格，用于评估密度
x_grid <- seq(min(data), max(data), length.out = 1000)
# 计算核密度估计
density_estimate <- kde(data, h, x_grid)
# 绘制核密度估计的结果
hist(data, breaks = 50)
lines(x_grid,density_estimate,col="red")
set.seed(123)
data <- numeric(1000)
weights <- c(0.2, 0.8)
means <- c(0, 2)
sigma <- c(2, 4)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.1
x_grid <- seq(min(data), max(data), length.out = 1000)
density_estimate <- kde(data, h, x_grid)
hist(data, breaks = 50)
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
set.seed(123)
data <- numeric(1000)
weights <- c(0.2, 0.8)
means <- c(0, 2)
sigma <- c(2, 4)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.05
x_grid <- seq(min(data), max(data), length.out = 1000)
density_estimate <- kde(data, h, x_grid)
hist(data, breaks = 50)
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
set.seed(123)
data <- numeric(1000)
weights <- c(0.2, 0.8)
means <- c(0, 2)
sigma <- c(2, 4)
for (i in 1:1000){
tmp <- sample(1:2, size = 1, prob = weights)
if (tmp == 1){
data[i] <- rnorm(1, mean = means[1], sd = sigma[1])
} else {
data[i] <- rnorm(1, mean = means[2], sd = sigma[2])
}
}
h <- 0.2
x_grid <- seq(min(data), max(data), length.out = 1000)
density_estimate <- kde(data, h, x_grid)
hist(data, breaks = 50)
plot(x_grid, density_estimate, type = "l", main = "Kernel Density Estimation", xlab = "Data Value", ylab = "Density")
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
